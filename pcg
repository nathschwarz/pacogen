#!/bin/bash

# Author:   Nathan Schwarz
# Mail:     nathan.notwhite@gmail.com
# Github:   github.com/nathschwarz
# Jabber:   nath_schwarz@jabber.de

#Initialize templatefuncs-dictionary
declare -A templatefuncs
#Get options
while getopts t:p:f:c:h opt
do
   case $opt in
        t) templatename=$OPTARG;;
        p) profilename=$OPTARG;;
        f) templatefuncs[${OPTARG% *}]=${OPTARG##* };; 
        c) content=$OPTARG;;
        h) printhelp=true;;
        *) printf "Unkown parameter.\n"; printhelp=true;;
   esac
done
shift $((OPTIND-1))

#Print help, then exit
if [[ -n "$printhelp" ]]; then
    printf "PaCoGen - passive code generator\n"
    printf "\t-t\tName of the template to use\n"
    printf "\t-p\tName of the profile to use\n"
    printf "\t-f\tInclude a function: \$function:\$name\n"
    printf "\t-c\tA file holding content that should replace the '##CONTENT##'-placeholder\n"
    printf "\t-h\tPrint this help\n"
#    printf "\t-\t\n"
    exit
fi

#Initiate default values for variables
filename=${1%.*}
fileextension=${1##*.}
if [[ -z "$templatename" ]]; then
    templatename="template"
fi
if [[ -z "$profilename" ]]; then
    profilename="default"
fi
if [[ -z "$PACOGEN_PROFILES" ]]; then
    PACOGEN_PROFILES="$HOME/pacogen"
fi
if [[ -z "$PACOGEN_TEMPLATES" ]]; then
    PACOGEN_TEMPLATES="$HOME/pacogen/templates"
fi

#Parse profile-information
profilefile="$PACOGEN_PROFILES"/"$profilename".profile 
if [[ ! -e "$profilefile" ]]; then
    printf "Profile file %s in %s not found, exiting.\n" "$profilename" "$PACOGEN_PROFILES"
    exit
else
    #decalre dictionary for presets
    declare -A profilepresets
    while read line; do
        #read presets and substitute them from current line
        profilepresets[${line%=*}]=${line##*=} 
    done < "$profilefile"
fi

#Copy template file to target and replace placeholders with info
templatefile="$PACOGEN_TEMPLATES"/"$templatename.$fileextension"
if [[ ! -e "$templatefile" ]]; then
    printf "Template file %s in %s not found, exiting.\n" "$templatename" "$PACOGEN_TEMPLATES"
    exit
else
    #Check if target file is present - if so prompt for overwrite
    if [[ -f "$1" ]]; then
        printf "File %s already exists - overwrite?\n" "$1"
        read answer
        #If prompt-result is 'y' overwrite and proceed - exit otherwise
        if [[ "$answer" = "y" ]]; then
            printf "Overwrite file %s, proceeding.\n" "$1"
        else
            printf "Not overwriting %s, exiting.\n" "$1"
            exit
        fi
    fi

    #Read template into file for substitutions
    file=$(< "$templatefile")
    #Check for 'FILENAME' in template-file 
    file=${file//"##FILENAME##"/$filename}

    #If function-flag is set, replace FUNCTION-placeholder with functions
    templatefunctions=""
    if [[ -n "${templatefuncs[@]}" ]]; then
        for func in "${!templatefuncs[@]}"; do
            #Concatenate functions indicated by function-flag
            templatefunction="$PACOGEN_TEMPLATES/$func.function.$fileextension"
            if [[ -f "$templatefunction" ]]; then
                templatefunctions="$templatefunctions$(< "$templatefunction")"
                #Substitute FUNCTIONSNAME-flag with functionname indicated by flag
                #First all with a preceding space
                templatefunctions=${templatefunctions//[[:space:]]"##FUNCTIONNAME##"/ ${templatefuncs["$func"]}}
                #Then the remaining placeholders
                templatefunctions=${templatefunctions//"##FUNCTIONNAME##"/${templatefuncs["$func"]^}}
            else
                printf "Couldn't find function-file for $func: $func.function.$fileextension\nThis function won't show up, the target file is still created and filled.\n"
            fi
        done
    fi
    #Substitute FUNCTIONS-flag with functions - if flag is not set it will be removed by nothing
    file=${file/"##FUNCTIONS##"/$(printf "%s" "$templatefunctions")}

    #if content-flag is set, replace CONTENT-placeholder with content from file
    if [[ -n "$content" ]]; then
        if [[ ! "$content" =~ '~/' || "$content" =~ './' ]]; then
            content="./$content"
        fi
        if [[ ! -f "$content" ]]; then
            printf "Couldn't find the file specified with the content-flag.\nThe content won't show up, the target file is still created and filled.\n"
        else
            content=$(< "$content")
            file=${file/"##CONTENT##"/$(printf "%s" "$content")}
        fi
    fi

    #Replace values from profile
    #Check if there are placeholders and substitute as long as placeholders are there
    for i in {1..5}; do #TODO: Find a better way to do this...
        for profilepreset in "${!profilepresets[@]}"; do
            file=${file//"##$profilepreset##"/"${profilepresets[$profilepreset]}"}
        done
    done

    if [[ $file =~ \#\#[[:upper:]]+\#\# ]]; then
        printf "There are unkown placeholders, check your profile and template-files!\n"
    fi

    #Write everything to file
    printf "%s" "$file" > "$1"
fi
